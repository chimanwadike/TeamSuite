// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TeamSuite.Repository;

#nullable disable

namespace TeamSuite.Repository.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20231104191334_checklist_with_seed_data")]
    partial class checklist_with_seed_data
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("TeamSuite.Entities.Models.CheckList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CheckListFormId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CheckListItemId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CheckListFormId");

                    b.HasIndex("CheckListItemId");

                    b.HasIndex("LocationId");

                    b.ToTable("CheckList");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ae41afcb-2cfa-445d-9be0-de741b33f86a"),
                            CheckListFormId = new Guid("0ccacbc2-ca8a-426c-8461-e01047ec9765"),
                            CheckListItemId = new Guid("a1dda148-d324-4231-b578-f238d69fcfb8"),
                            LocationId = new Guid("03164e2a-7a90-11ee-b962-0242ac120002"),
                            Order = 1
                        },
                        new
                        {
                            Id = new Guid("d85eda40-0b43-407e-80e1-e4b28be86fd2"),
                            CheckListFormId = new Guid("0ccacbc2-ca8a-426c-8461-e01047ec9765"),
                            CheckListItemId = new Guid("2886bc74-cb10-40fd-a1aa-d8fdff8da600"),
                            LocationId = new Guid("03164e2a-7a90-11ee-b962-0242ac120002"),
                            Order = 2
                        },
                        new
                        {
                            Id = new Guid("1989a2dd-82d6-488e-a29e-cbdfeb5b18dc"),
                            CheckListFormId = new Guid("0ccacbc2-ca8a-426c-8461-e01047ec9765"),
                            CheckListItemId = new Guid("d228aac6-b250-4624-851d-f5436e3ddfd0"),
                            LocationId = new Guid("03164e2a-7a90-11ee-b962-0242ac120002"),
                            Order = 3
                        },
                        new
                        {
                            Id = new Guid("e52c85b4-8ee9-4d25-ad63-8c386de8734b"),
                            CheckListFormId = new Guid("0ccacbc2-ca8a-426c-8461-e01047ec9765"),
                            CheckListItemId = new Guid("323b892f-675c-4398-a522-fe236452b845"),
                            LocationId = new Guid("03164e2a-7a90-11ee-b962-0242ac120002"),
                            Order = 4
                        },
                        new
                        {
                            Id = new Guid("0fdadf87-a6ef-4c77-adbb-29cf9f621513"),
                            CheckListFormId = new Guid("0ccacbc2-ca8a-426c-8461-e01047ec9765"),
                            CheckListItemId = new Guid("4c211be7-08d2-40d6-aa53-c2fd45e44093"),
                            LocationId = new Guid("03164e2a-7a90-11ee-b962-0242ac120002"),
                            Order = 5
                        },
                        new
                        {
                            Id = new Guid("4f4acce2-9c26-4cce-bbd8-48ab28246e8c"),
                            CheckListFormId = new Guid("0ccacbc2-ca8a-426c-8461-e01047ec9765"),
                            CheckListItemId = new Guid("4d8e9047-5252-4b4d-a444-fd61bde84f30"),
                            LocationId = new Guid("13164e2a-7a90-11ee-b962-0242ac120002"),
                            Order = 6
                        },
                        new
                        {
                            Id = new Guid("f3b77dd2-e03a-4c07-8391-75c01513da68"),
                            CheckListFormId = new Guid("0ccacbc2-ca8a-426c-8461-e01047ec9765"),
                            CheckListItemId = new Guid("8a7a6f0a-22d1-49ed-acac-5077ca1de851"),
                            LocationId = new Guid("13164e2a-7a90-11ee-b962-0242ac120002"),
                            Order = 7
                        },
                        new
                        {
                            Id = new Guid("42db7a66-078a-4501-bcc5-f22a73c0f7a8"),
                            CheckListFormId = new Guid("0ccacbc2-ca8a-426c-8461-e01047ec9765"),
                            CheckListItemId = new Guid("1f697cf5-88d4-4540-bc12-cc0a7fb4a4b4"),
                            LocationId = new Guid("13164e2a-7a90-11ee-b962-0242ac120002"),
                            Order = 8
                        },
                        new
                        {
                            Id = new Guid("eb7c46b1-87c6-4c73-9c80-b1b1486c2ba1"),
                            CheckListFormId = new Guid("0ccacbc2-ca8a-426c-8461-e01047ec9765"),
                            CheckListItemId = new Guid("f7e3ba90-7bec-4a7a-b13f-546cc47bdc8d"),
                            LocationId = new Guid("13164e2a-7a90-11ee-b962-0242ac120002"),
                            Order = 9
                        },
                        new
                        {
                            Id = new Guid("6dcc9fdb-f969-4f2c-82ba-6911fd6e4476"),
                            CheckListFormId = new Guid("0ccacbc2-ca8a-426c-8461-e01047ec9765"),
                            CheckListItemId = new Guid("700bbd8f-ed41-42a8-a05b-247b75e094a9"),
                            LocationId = new Guid("13164e2a-7a90-11ee-b962-0242ac120002"),
                            Order = 10
                        },
                        new
                        {
                            Id = new Guid("08903ef8-4b71-45da-b291-c39438d176cb"),
                            CheckListFormId = new Guid("0ccacbc2-ca8a-426c-8461-e01047ec9765"),
                            CheckListItemId = new Guid("2cdad48a-0eb7-427d-85be-06b5b3ea79e1"),
                            LocationId = new Guid("13164e2a-7a90-11ee-b962-0242ac120002"),
                            Order = 11
                        },
                        new
                        {
                            Id = new Guid("886788dd-0c1f-4432-b8e0-14ce92672e43"),
                            CheckListFormId = new Guid("0ccacbc2-ca8a-426c-8461-e01047ec9765"),
                            CheckListItemId = new Guid("cbda2593-663c-4d1d-8fa7-fdfff22ec4ef"),
                            LocationId = new Guid("13164e2a-7a90-11ee-b962-0242ac120002"),
                            Order = 12
                        },
                        new
                        {
                            Id = new Guid("51e5af57-b859-4e4b-add2-3dfcd257b042"),
                            CheckListFormId = new Guid("0ccacbc2-ca8a-426c-8461-e01047ec9765"),
                            CheckListItemId = new Guid("ee3994db-db07-4777-b1f8-ee73dc2fdc9e"),
                            LocationId = new Guid("13164e2a-7a90-11ee-b962-0242ac120002"),
                            Order = 13
                        },
                        new
                        {
                            Id = new Guid("35d216c1-9847-4fcc-8f90-48dd785ca18d"),
                            CheckListFormId = new Guid("0ccacbc2-ca8a-426c-8461-e01047ec9765"),
                            CheckListItemId = new Guid("5b9b97a8-e9b9-4ec2-9b22-a73cd7aae21f"),
                            LocationId = new Guid("13164e2a-7a90-11ee-b962-0242ac120002"),
                            Order = 14
                        },
                        new
                        {
                            Id = new Guid("47ca39fd-46e5-42ba-a33a-cdc38850af8b"),
                            CheckListFormId = new Guid("0ccacbc2-ca8a-426c-8461-e01047ec9765"),
                            CheckListItemId = new Guid("1ee4d6f9-543f-4e82-bfee-4fb5fbae2e76"),
                            LocationId = new Guid("13164e2a-7a90-11ee-b962-0242ac120002"),
                            Order = 15
                        },
                        new
                        {
                            Id = new Guid("9d52c8d7-baa4-4b0a-bd67-26ecc680f2e4"),
                            CheckListFormId = new Guid("0ccacbc2-ca8a-426c-8461-e01047ec9765"),
                            CheckListItemId = new Guid("86561683-ea1b-4817-93d5-617465998a62"),
                            LocationId = new Guid("23164e2a-7a90-11ee-b962-0242ac120002"),
                            Order = 16
                        },
                        new
                        {
                            Id = new Guid("8add9f01-b65b-49e3-afca-b87fdba89413"),
                            CheckListFormId = new Guid("0ccacbc2-ca8a-426c-8461-e01047ec9765"),
                            CheckListItemId = new Guid("ef4662de-f86f-4c61-ae5b-d08554ebec16"),
                            LocationId = new Guid("23164e2a-7a90-11ee-b962-0242ac120002"),
                            Order = 17
                        },
                        new
                        {
                            Id = new Guid("60086472-53d1-4c23-ae4b-19605550f191"),
                            CheckListFormId = new Guid("0ccacbc2-ca8a-426c-8461-e01047ec9765"),
                            CheckListItemId = new Guid("a5abdc33-7865-487e-928f-5ce5fcc80bb8"),
                            LocationId = new Guid("23164e2a-7a90-11ee-b962-0242ac120002"),
                            Order = 18
                        },
                        new
                        {
                            Id = new Guid("157aafe4-c388-4d0b-97da-5c0315982fc0"),
                            CheckListFormId = new Guid("0ccacbc2-ca8a-426c-8461-e01047ec9765"),
                            CheckListItemId = new Guid("e7c7973f-1ec6-4745-88ed-011b3064046c"),
                            LocationId = new Guid("23164e2a-7a90-11ee-b962-0242ac120002"),
                            Order = 19
                        },
                        new
                        {
                            Id = new Guid("3768dad2-a72b-4a07-8ffa-684c656a4802"),
                            CheckListFormId = new Guid("0ccacbc2-ca8a-426c-8461-e01047ec9765"),
                            CheckListItemId = new Guid("7358c6ff-0617-45d0-85a2-db13d0f92100"),
                            LocationId = new Guid("23164e2a-7a90-11ee-b962-0242ac120002"),
                            Order = 20
                        },
                        new
                        {
                            Id = new Guid("fe30ade3-bda3-4a99-9581-f28db009d206"),
                            CheckListFormId = new Guid("0ccacbc2-ca8a-426c-8461-e01047ec9765"),
                            CheckListItemId = new Guid("6372e3ad-9a8c-44e1-bbf2-9de4c7f32f53"),
                            LocationId = new Guid("23164e2a-7a90-11ee-b962-0242ac120002"),
                            Order = 21
                        });
                });

            modelBuilder.Entity("TeamSuite.Entities.Models.CheckListForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CheckListForm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0ccacbc2-ca8a-426c-8461-e01047ec9765"),
                            Description = "Technical Services Management",
                            Name = "Technical Team CheckList"
                        });
                });

            modelBuilder.Entity("TeamSuite.Entities.Models.CheckListItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Status")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("CheckListItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1dda148-d324-4231-b578-f238d69fcfb8"),
                            Name = "Switch on Server",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("2886bc74-cb10-40fd-a1aa-d8fdff8da600"),
                            Name = "Switch on Internet",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("d228aac6-b250-4624-851d-f5436e3ddfd0"),
                            Name = "Switch on System for Intercom",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("323b892f-675c-4398-a522-fe236452b845"),
                            Name = "Confirm Intercom Working (Call all lines)",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("4c211be7-08d2-40d6-aa53-c2fd45e44093"),
                            Name = "Confirm Internet functioning",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("4d8e9047-5252-4b4d-a444-fd61bde84f30"),
                            Name = "Switch on System(s)",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("8a7a6f0a-22d1-49ed-acac-5077ca1de851"),
                            Name = "Confirm internet on System(s)",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("1f697cf5-88d4-4540-bc12-cc0a7fb4a4b4"),
                            Name = "Switch on TV",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("f7e3ba90-7bec-4a7a-b13f-546cc47bdc8d"),
                            Name = "Switch on CCTV",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("700bbd8f-ed41-42a8-a05b-247b75e094a9"),
                            Name = "Check Nursing Mothers Room for feed",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("2cdad48a-0eb7-427d-85be-06b5b3ea79e1"),
                            Name = "Check System Storage Space",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("cbda2593-663c-4d1d-8fa7-fdfff22ec4ef"),
                            Name = "Confirm Sound from Epignosis",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("ee3994db-db07-4777-b1f8-ee73dc2fdc9e"),
                            Name = "Confirm Sound from Main Church",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("5b9b97a8-e9b9-4ec2-9b22-a73cd7aae21f"),
                            Name = "Confirm Feed form Broadcast",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("1ee4d6f9-543f-4e82-bfee-4fb5fbae2e76"),
                            Name = "Confirm Feed and Sound to Streaming Booth",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("86561683-ea1b-4817-93d5-617465998a62"),
                            Name = "Check System for Recording and Timer",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("ef4662de-f86f-4c61-ae5b-d08554ebec16"),
                            Name = "Test Recording software",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("a5abdc33-7865-487e-928f-5ce5fcc80bb8"),
                            Name = "Retrieve program for the Day",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("e7c7973f-1ec6-4745-88ed-011b3064046c"),
                            Name = "Upload Program to System and share to TV",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("7358c6ff-0617-45d0-85a2-db13d0f92100"),
                            Name = "Setup timer",
                            Status = true
                        },
                        new
                        {
                            Id = new Guid("6372e3ad-9a8c-44e1-bbf2-9de4c7f32f53"),
                            Name = "Confirm Feed from Broadcast on Vmix",
                            Status = true
                        });
                });

            modelBuilder.Entity("TeamSuite.Entities.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.ToTable("Location");

                    b.HasData(
                        new
                        {
                            Id = new Guid("03164e2a-7a90-11ee-b962-0242ac120002"),
                            Name = "Server Room",
                            SiteId = new Guid("b6dda148-d324-4231-b578-f238d69fcfb8")
                        },
                        new
                        {
                            Id = new Guid("13164e2a-7a90-11ee-b962-0242ac120002"),
                            Name = "Tarmac",
                            SiteId = new Guid("b6dda148-d324-4231-b578-f238d69fcfb8")
                        },
                        new
                        {
                            Id = new Guid("23164e2a-7a90-11ee-b962-0242ac120002"),
                            Name = "IT Desk",
                            SiteId = new Guid("b6dda148-d324-4231-b578-f238d69fcfb8")
                        });
                });

            modelBuilder.Entity("TeamSuite.Entities.Models.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateOfWedding")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("Gender")
                        .HasColumnType("uuid");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("MaritalStatus")
                        .HasColumnType("uuid");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("TeamSuite.Entities.Models.Site", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Site");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b6dda148-d324-4231-b578-f238d69fcfb8"),
                            Address = "Wumba, Apo",
                            Name = "Graceland"
                        });
                });

            modelBuilder.Entity("TeamSuite.Entities.Models.SubTeam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("SubTeam");
                });

            modelBuilder.Entity("TeamSuite.Entities.Models.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SiteId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TeamSuite.Entities.Models.CheckList", b =>
                {
                    b.HasOne("TeamSuite.Entities.Models.CheckListForm", "CheckListForm")
                        .WithMany()
                        .HasForeignKey("CheckListFormId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamSuite.Entities.Models.CheckListItem", "checkListItem")
                        .WithMany()
                        .HasForeignKey("CheckListItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TeamSuite.Entities.Models.Location", "location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CheckListForm");

                    b.Navigation("checkListItem");

                    b.Navigation("location");
                });

            modelBuilder.Entity("TeamSuite.Entities.Models.Location", b =>
                {
                    b.HasOne("TeamSuite.Entities.Models.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Site");
                });

            modelBuilder.Entity("TeamSuite.Entities.Models.Member", b =>
                {
                    b.HasOne("TeamSuite.Entities.Models.Site", "Site")
                        .WithMany("Members")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Site");
                });

            modelBuilder.Entity("TeamSuite.Entities.Models.SubTeam", b =>
                {
                    b.HasOne("TeamSuite.Entities.Models.Team", "Team")
                        .WithMany("SubTeams")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("TeamSuite.Entities.Models.Team", b =>
                {
                    b.HasOne("TeamSuite.Entities.Models.Site", "Site")
                        .WithMany("Teams")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Site");
                });

            modelBuilder.Entity("TeamSuite.Entities.Models.Site", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("TeamSuite.Entities.Models.Team", b =>
                {
                    b.Navigation("SubTeams");
                });
#pragma warning restore 612, 618
        }
    }
}
